/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, DashboardData as PrismaDashboardData } from "@prisma/client";

export class DashboardDataServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DashboardDataCountArgs, "select">
  ): Promise<number> {
    return this.prisma.dashboardData.count(args);
  }

  async dashboardDataItems(
    args: Prisma.DashboardDataFindManyArgs
  ): Promise<PrismaDashboardData[]> {
    return this.prisma.dashboardData.findMany(args);
  }
  async dashboardData(
    args: Prisma.DashboardDataFindUniqueArgs
  ): Promise<PrismaDashboardData | null> {
    return this.prisma.dashboardData.findUnique(args);
  }
  async createDashboardData(
    args: Prisma.DashboardDataCreateArgs
  ): Promise<PrismaDashboardData> {
    return this.prisma.dashboardData.create(args);
  }
  async updateDashboardData(
    args: Prisma.DashboardDataUpdateArgs
  ): Promise<PrismaDashboardData> {
    return this.prisma.dashboardData.update(args);
  }
  async deleteDashboardData(
    args: Prisma.DashboardDataDeleteArgs
  ): Promise<PrismaDashboardData> {
    return this.prisma.dashboardData.delete(args);
  }
}
