/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DashboardData } from "./DashboardData";
import { DashboardDataCountArgs } from "./DashboardDataCountArgs";
import { DashboardDataFindManyArgs } from "./DashboardDataFindManyArgs";
import { DashboardDataFindUniqueArgs } from "./DashboardDataFindUniqueArgs";
import { CreateDashboardDataArgs } from "./CreateDashboardDataArgs";
import { UpdateDashboardDataArgs } from "./UpdateDashboardDataArgs";
import { DeleteDashboardDataArgs } from "./DeleteDashboardDataArgs";
import { DashboardDataService } from "../dashboardData.service";
@graphql.Resolver(() => DashboardData)
export class DashboardDataResolverBase {
  constructor(protected readonly service: DashboardDataService) {}

  async _dashboardDataItemsMeta(
    @graphql.Args() args: DashboardDataCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DashboardData])
  async dashboardDataItems(
    @graphql.Args() args: DashboardDataFindManyArgs
  ): Promise<DashboardData[]> {
    return this.service.dashboardDataItems(args);
  }

  @graphql.Query(() => DashboardData, { nullable: true })
  async dashboardData(
    @graphql.Args() args: DashboardDataFindUniqueArgs
  ): Promise<DashboardData | null> {
    const result = await this.service.dashboardData(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DashboardData)
  async createDashboardData(
    @graphql.Args() args: CreateDashboardDataArgs
  ): Promise<DashboardData> {
    return await this.service.createDashboardData({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DashboardData)
  async updateDashboardData(
    @graphql.Args() args: UpdateDashboardDataArgs
  ): Promise<DashboardData | null> {
    try {
      return await this.service.updateDashboardData({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DashboardData)
  async deleteDashboardData(
    @graphql.Args() args: DeleteDashboardDataArgs
  ): Promise<DashboardData | null> {
    try {
      return await this.service.deleteDashboardData(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
