/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DashboardDataService } from "../dashboardData.service";
import { DashboardDataCreateInput } from "./DashboardDataCreateInput";
import { DashboardData } from "./DashboardData";
import { DashboardDataFindManyArgs } from "./DashboardDataFindManyArgs";
import { DashboardDataWhereUniqueInput } from "./DashboardDataWhereUniqueInput";
import { DashboardDataUpdateInput } from "./DashboardDataUpdateInput";

export class DashboardDataControllerBase {
  constructor(protected readonly service: DashboardDataService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DashboardData })
  async createDashboardData(
    @common.Body() data: DashboardDataCreateInput
  ): Promise<DashboardData> {
    return await this.service.createDashboardData({
      data: data,
      select: {
        campaignPerformanceData: true,
        createdAt: true,
        generatedInsights: true,
        id: true,
        optimizationRecommendations: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DashboardData] })
  @ApiNestedQuery(DashboardDataFindManyArgs)
  async dashboardDataItems(
    @common.Req() request: Request
  ): Promise<DashboardData[]> {
    const args = plainToClass(DashboardDataFindManyArgs, request.query);
    return this.service.dashboardDataItems({
      ...args,
      select: {
        campaignPerformanceData: true,
        createdAt: true,
        generatedInsights: true,
        id: true,
        optimizationRecommendations: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DashboardData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dashboardData(
    @common.Param() params: DashboardDataWhereUniqueInput
  ): Promise<DashboardData | null> {
    const result = await this.service.dashboardData({
      where: params,
      select: {
        campaignPerformanceData: true,
        createdAt: true,
        generatedInsights: true,
        id: true,
        optimizationRecommendations: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DashboardData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDashboardData(
    @common.Param() params: DashboardDataWhereUniqueInput,
    @common.Body() data: DashboardDataUpdateInput
  ): Promise<DashboardData | null> {
    try {
      return await this.service.updateDashboardData({
        where: params,
        data: data,
        select: {
          campaignPerformanceData: true,
          createdAt: true,
          generatedInsights: true,
          id: true,
          optimizationRecommendations: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DashboardData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDashboardData(
    @common.Param() params: DashboardDataWhereUniqueInput
  ): Promise<DashboardData | null> {
    try {
      return await this.service.deleteDashboardData({
        where: params,
        select: {
          campaignPerformanceData: true,
          createdAt: true,
          generatedInsights: true,
          id: true,
          optimizationRecommendations: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
