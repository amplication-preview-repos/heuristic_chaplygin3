/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MarketplaceEntry } from "./MarketplaceEntry";
import { MarketplaceEntryCountArgs } from "./MarketplaceEntryCountArgs";
import { MarketplaceEntryFindManyArgs } from "./MarketplaceEntryFindManyArgs";
import { MarketplaceEntryFindUniqueArgs } from "./MarketplaceEntryFindUniqueArgs";
import { CreateMarketplaceEntryArgs } from "./CreateMarketplaceEntryArgs";
import { UpdateMarketplaceEntryArgs } from "./UpdateMarketplaceEntryArgs";
import { DeleteMarketplaceEntryArgs } from "./DeleteMarketplaceEntryArgs";
import { MarketplaceEntryService } from "../marketplaceEntry.service";
@graphql.Resolver(() => MarketplaceEntry)
export class MarketplaceEntryResolverBase {
  constructor(protected readonly service: MarketplaceEntryService) {}

  async _marketplaceEntriesMeta(
    @graphql.Args() args: MarketplaceEntryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MarketplaceEntry])
  async marketplaceEntries(
    @graphql.Args() args: MarketplaceEntryFindManyArgs
  ): Promise<MarketplaceEntry[]> {
    return this.service.marketplaceEntries(args);
  }

  @graphql.Query(() => MarketplaceEntry, { nullable: true })
  async marketplaceEntry(
    @graphql.Args() args: MarketplaceEntryFindUniqueArgs
  ): Promise<MarketplaceEntry | null> {
    const result = await this.service.marketplaceEntry(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MarketplaceEntry)
  async createMarketplaceEntry(
    @graphql.Args() args: CreateMarketplaceEntryArgs
  ): Promise<MarketplaceEntry> {
    return await this.service.createMarketplaceEntry({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => MarketplaceEntry)
  async updateMarketplaceEntry(
    @graphql.Args() args: UpdateMarketplaceEntryArgs
  ): Promise<MarketplaceEntry | null> {
    try {
      return await this.service.updateMarketplaceEntry({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MarketplaceEntry)
  async deleteMarketplaceEntry(
    @graphql.Args() args: DeleteMarketplaceEntryArgs
  ): Promise<MarketplaceEntry | null> {
    try {
      return await this.service.deleteMarketplaceEntry(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
